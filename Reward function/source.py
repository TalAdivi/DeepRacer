class Reward:
    def __init__(self, active_logs = False):
        self.active_logs = active_logs

    def calc_min_distance_from_closest_point(self, curr_x, curr_y, racing_lines_coords, continueIndex = 999):
        # Calculate distance d²=(x1-x2)² + (y1-y2)²
        min_distance_from_current_coord = math.inf
        index_min_distance_from_current_coord = 0
        for index, [x, y, s, r, d] in enumerate(racing_lines_coords):
            if continueIndex == index:
                continue
            distance = (((curr_x - x) ** 2) + ((curr_y - y) ** 2)) ** 0.5
            if distance < min_distance_from_current_coord:
                min_distance_from_current_coord = distance
                index_min_distance_from_current_coord = index

        return {"index": index_min_distance_from_current_coord, "distance": min_distance_from_current_coord, "speed": racing_lines_coords[index_min_distance_from_current_coord][2], "radius": racing_lines_coords[index_min_distance_from_current_coord][3], "angel": racing_lines_coords[index_min_distance_from_current_coord][4]}


    def reward_function(self, params):
        # Read input parameters
        all_wheels_on_track = params["all_wheels_on_track"]  # flag to indicate if the agent is on the track
        x = params["x"]  # agent's x-coordinate in meters
        y = params["y"]  # agent's y-coordinate in meters
        closest_objects = params["closest_objects"]  # zero-based indices of the two closest objects to the agent's
        closest_waypoints = params["closest_waypoints"]  # indices of the two nearest waypoints.
        distance_from_center = params["distance_from_center"]  # distance in meters from the track center
        is_crashed = params["is_crashed"]  # Boolean flag to indicate whether the agent has crashed.
        is_left_of_center = params["is_left_of_center"]  # Flag to indicate if the agent is on the left side to the
        is_offtrack = params["is_offtrack"]  # Boolean flag to indicate whether the agent has gone off track
        is_reversed = params["is_reversed"]  # flag to indicate if the agent is driving clockwise (True) or
        heading = params["heading"]  # agent's yaw in degrees
        objects_distance = params["objects_distance"]  # list of the objects' distances in meters between 0 and
        objects_heading = params["objects_heading"]  # list of the objects' headings in degrees between -180 and 180
        objects_left_of_center = params["objects_left_of_center"]  # list of Boolean flags indicating whether elements' objects
        objects_location = params["objects_location"]  # list of object locations [(x,y) ...].
        objects_speed = params["objects_speed"]  # list of the objects' speeds in meters per second.
        progress = params["progress"]  # percentage of track completed
        speed = params["speed"]  # agent's speed in meters per second (m/s)
        steering_angle = abs(params["steering_angle"])  # agent's steering angle in degrees
        steps = params["steps"]  # number steps completed
        track_length = params["track_length"]  # track length in meters.
        track_width = params["track_width"]  # width of the track
        waypoints = params["waypoints"]  # list of (x,y) as milestones along the track center

        # Read all 155 track coordinates (x,y) after racing lines optimization (after 850 iterations). Including optimal speed, the radius in each point and the angel in deggres (s,r,d).
        racing_lines_coords = [[0.58102712, 2.81034401, 1.1344657332557149, 999, 0.009463266929570712],
        [0.58429556, 2.68967924, 1.129097163622659, 999, 0.009463266929570712],
        [0.5978948,
        2.56932659,
        1.1204130465272426,
        1.4156636170462555,
        6.69321427850934],
        [0.62170464,
        2.45042324,
        1.1122558388674544,
        1.4243029540716174,
        6.652431526360475],
        [0.6555558,
        2.33406519,
        1.107507113116428,
        1.4186324104382364,
        6.679143425266883],
        [0.69922991,
        2.22128473,
        1.107507113116428,
        1.4022967858719213,
        6.757310689654439],
        [0.75245791,
        2.11302757,
        1.107507113116428,
        1.3808090357378493,
        6.862967873928163],
        [0.8149174,
        2.01012967,
        1.107507113116428,
        1.3607761670544982,
        6.96449894443766],
        [0.88622984,
        1.91329448,
        1.107507113116428,
        1.3491814276184781,
        7.024651597210627],
        [0.96595809,
        1.8230715,
        1.1090812516755084,
        1.3530194306394145,
        7.004625310397032],
        [1.05360496,
        1.739837,
        1.1198124477675822,
        1.3793290638295197,
        6.870367076775555],
        [1.14861321,
        1.6637779,
        1.1424641635377497,
        1.4356959591814105,
        6.5994053199457285],
        [1.25036659,
        1.59487933,
        1.1799368272898205,
        1.531421775813673,
        6.1852265785277405],
        [1.35819114,
        1.53291534,
        1.2357762361943219,
        1.6797977098811594,
        5.637031321381047],
        [1.47135317,
        1.47743886,
        1.3155109255409336,
        1.9035584840460626,
        4.972624820001078],
        [1.58904815,
        1.42776392,
        1.4299144498496903,
        2.249041222008615,
        4.207261640639915],
        [1.71039683,
        1.38296379,
        1.5988948675964763,
        2.812011695653287,
        3.363868266239437],
        [1.83452424,
        1.34199423,
        1.8415439560556164,
        3.730280455917415,
        2.53516839082602],
        [1.96068607,
        1.30390095,
        2.1603838544381784,
        5.133802435086184,
        1.8417989562061208],
        [2.08839458,
        1.26804002,
        2.483927280415207,
        6.786643872493725,
        1.3931385520572608],
        [2.2231517,
        1.23232374,
        2.7620628795447346,
        9.273756551598364,
        1.0194684776702778],
        [2.35724352,
        1.19475484,
        2.654261237145486,
        9.89290822484784,
        0.9556585145111011],
        [2.4906253,
        1.15521482,
        2.654261237145486,
        9.266431500085652,
        1.0202744457736042],
        [2.6232595,
        1.11360486,
        2.654261237145486,
        8.798311813256262,
        1.0745649909262416],
        [2.75510976,
        1.06982968,
        2.654261237145486,
        8.391593314223693,
        1.1266528936546945],
        [2.88611039,
        1.02371369,
        2.654261237145486,
        7.749338559283002,
        1.2200419448659852],
        [3.01626763,
        0.97528105,
        2.557717430907106,
        7.8231955238108135,
        1.2085220967905816],
        [3.14561605,
        0.9246366,
        2.297398748588193,
        8.19223397904991,
        1.1540738379407118],
        [3.27414698,
        0.87178366,
        2.1211586645378624,
        8.200594235258809,
        1.1528971358946873],
        [3.40178871,
        0.81664194,
        1.9727023039222942,
        7.872770057329486,
        1.2009109609989999],
        [3.52736468,
        0.75950003,
        1.8373784768458163,
        7.195855475260927,
        1.3138996861545817],
        [3.64999554,
        0.70712133,
        1.7161279199373045,
        5.805639515975054,
        1.628602111409539],
        [3.77233624,
        0.65869566,
        1.6076237398536997,
        4.949070226795188,
        1.9105721731920497],
        [3.89493182,
        0.61445687,
        1.5116924742669864,
        4.280558230534223,
        2.209091849752654],
        [4.01790723,
        0.57487946,
        1.4296525007619127,
        3.7134241304506728,
        2.5466838338181947],
        [4.14129297,
        0.5405118,
        1.3654787481414001,
        3.239489821333847,
        2.9195634299064004],
        [4.26508843,
        0.51194662,
        1.322688814394044,
        2.842798825835349,
        3.3273967883865954],
        [4.38927127,
        0.48980971,
        1.3005475350513325,
        2.513646534697072,
        3.763697810109825],
        [4.51379398,
        0.47473785,
        1.296431284030559,
        2.24821728413715,
        4.208806317699728],
        [4.63857701,
        0.46731862,
        1.296431284030559,
        2.0509128038384086,
        4.6145461402717345],
        [4.7635034,
        0.4680135,
        1.296431284030559,
        1.9243881213624854,
        4.918667628674284],
        [4.88841883,
        0.47712449,
        1.296431284030559,
        1.8605003941432585,
        5.088007695769282],
        [5.01313584,
        0.49479681,
        1.296431284030559,
        1.848742012156226,
        5.120454631576912],
        [5.13744033,
        0.52103528,
        1.3076888821136095,
        1.8809886222168786,
        5.032444014242787],
        [5.26109931,
        0.5557233,
        1.332091125772853,
        1.9518443234599687,
        4.8493108425124944],
        [5.38386921,
        0.59864189,
        1.3677302157300202,
        2.057681668667271,
        4.599333575400707],
        [5.50550424,
        0.64948806,
        1.4129243109405887,
        2.1959128554566036,
        4.309243073154539],
        [5.62576456,
        0.70789265,
        1.466144014846273,
        2.364452367173813,
        4.001558060187589],
        [5.74442345,
        0.77343728,
        1.5259947181002962,
        2.561435159565101,
        3.69338025106804],
        [5.86127344,
        0.84567036,
        1.5912052943344697,
        2.7850290913887825,
        3.396496968132321],
        [5.97613087,
        0.92412179,
        1.66062172492347,
        3.0333235455670504,
        3.118187638353816],
        [6.08883881,
        1.00831605,
        1.7332025314278,
        3.304273102259648,
        2.862274589736063],
        [6.1992683,
        1.09778361,
        1.8079805260859005,
        3.5955456119637605,
        2.6302336057735074],
        [6.3073179,
        1.19207041,
        1.8840305747898245,
        3.904390061299792,
        2.422047922446949],
        [6.4129119,
        1.2907453,
        1.9604525145010814,
        4.227561757182298,
        2.236798889457455],
        [6.51599732,
        1.39340566,
        2.03629005728619,
        4.5609633998018975,
        2.0732170174769906],
        [6.61654005,
        1.49968107,
        2.11053140884229,
        4.8996036008785575,
        1.9298686601771118],
        [6.71452046,
        1.6092353,
        2.182075750397678,
        5.2374145660231335,
        1.8053503362208203],
        [6.80992866,
        1.72176685,
        2.2497026359497827,
        5.567080998248202,
        1.6984104007424443],
        [6.90275969,
        1.83700823,
        2.31209513795936,
        5.880154085848294,
        1.6079586625585305],
        [6.99300883,
        1.95472419,
        2.3678819096307215,
        6.167332808070957,
        1.5330665731595707],
        [7.08066689,
        2.07470923,
        2.4155983581830562,
        6.418399676153304,
        1.473084521331283],
        [7.1657158,
        2.19678448,
        2.4538340170463826,
        6.623196974342136,
        1.4275253800682137],
        [7.24812419,
        2.32079409,
        2.461808838982813,
        6.771877446808393,
        1.3961769628040208],
        [7.32784309,
        2.4466013,
        2.4224061955059604,
        6.855827592723036,
        1.3790773437679587],
        [7.40480152,
        2.57408421,
        2.3697736045457947,
        6.868216335247274,
        1.3765893142020356],
        [7.47890216,
        2.70313115,
        2.3050649611560456,
        6.805300930493012,
        1.389318446315817],
        [7.55001675,
        2.83363573,
        2.229833638649279,
        6.6663169614624715,
        1.418289771706233],
        [7.61798171,
        2.96549154,
        2.145979225828669,
        6.454628375952685,
        1.4648145486867774],
        [7.68259374,
        3.0985863,
        2.055549938437513,
        6.177190877697347,
        1.5306193966996229],
        [7.74360595,
        3.23279562,
        1.9606799616171753,
        5.844449953229714,
        1.617784392139194],
        [7.80072462,
        3.36797627,
        1.8633876922465369,
        5.469180181646353,
        1.7288218692853967],
        [7.85360726,
        3.50395919,
        1.7655815422168146,
        5.065570134483967,
        1.866616372665658],
        [7.90186218,
        3.6405424,
        1.668946884327486,
        4.647649517196138,
        2.034531779502293],
        [7.94505035,
        3.77748403,
        1.5749999255994693,
        4.228542757743004,
        2.236279699715827],
        [7.98268969,
        3.91449606,
        1.4850806965757577,
        3.819299807960188,
        2.4760420238104253],
        [8.01426252,
        4.0512391,
        1.4004091622965276,
        3.428884573391017,
        2.758172738284102],
        [8.03922598,
        4.18731879,
        1.3221246741294497,
        3.063813574184525,
        3.0871262821270693],
        [8.05702574,
        4.32228445,
        1.2512984385030204,
        2.728590614656184,
        3.4668354845438665],
        [8.06711245,
        4.45563029,
        1.188963822978517,
        2.4259252336155757,
        3.8999997657202514],
        [8.06896051,
        4.58679964,
        1.1360796897841272,
        2.1571840116975096,
        4.3867589318899105],
        [8.06208834,
        4.71519238,
        1.0935030231836815,
        1.9227469291226664,
        4.922876395733654],
        [8.0460789,
        4.84017533,
        1.0619246740136892,
        1.722261569992244,
        5.497611822152082],
        [8.02059953,
        4.96109548,
        1.0417955663587164,
        1.5549434043951438,
        6.09130579831881],
        [7.98541956,
        5.07729526,
        1.0332558032762351,
        1.4196944920703567,
        6.674123987734847],
        [7.9404247,
        5.18812903,
        1.0332558032762351,
        1.3152771699887411,
        7.206676663873079],
        [7.88562714,
        5.29297983,
        1.0332558032762351,
        1.2404084880364088,
        7.644181845649357],
        [7.82117065,
        5.39127517,
        1.0332558032762351,
        1.1938295252228064,
        7.944319677126722],
        [7.74733037,
        5.48250081,
        1.0332558032762351,
        1.174337723697008,
        8.077053604089881],
        [7.66450734,
        5.56621158,
        1.0360747562383241,
        1.180754176532556,
        8.032870617444203],
        [7.5732183,
        5.6420385,
        1.049616242982923,
        1.2118207690929061,
        7.825630062278922],
        [7.47408156,
        5.70969177,
        1.0728277832852964,
        1.2660105646311233,
        7.488700648316931],
        [7.36780002,
        5.76895964,
        1.1042609171698934,
        1.3412838916377736,
        7.066223399514891],
        [7.25514246,
        5.81970342,
        1.142109394414331,
        1.434804444978198,
        6.603524100819422],
        [7.13692443,
        5.86184936,
        1.1842808790703185,
        1.5427186883067283,
        6.1397590167734775],
        [7.01398972,
        5.89537831,
        1.2284854907562632,
        1.6600354742826242,
        5.704359810967597],
        [6.88719314,
        5.92031435,
        1.2723664262361685,
        1.7807448933772219,
        5.3165300415114976],
        [6.7573853,
        5.93671348,
        1.3136668338962434,
        1.8982253836946383,
        4.986630836196654],
        [6.62539944,
        5.94465368,
        1.3504444724496312,
        2.0059992620594653,
        4.718095611829225],
        [6.49204007,
        5.94422726,
        1.3812906109673346,
        2.0986858064064324,
        4.509283902850918],
        [6.35807332,
        5.93553641,
        1.405540757182289,
        2.173022348896819,
        4.354723569813997],
        [6.22421807,
        5.91869232,
        1.4233896453646844,
        2.2285629707113834,
        4.245992744302038],
        [6.09113752,
        5.89381821,
        1.4359276993500045,
        2.2679968769910577,
        4.172035291694332],
        [5.95943059,
        5.86105592,
        1.4450367287556034,
        2.296862923419418,
        4.119511719402719],
        [5.82962272,
        5.82057571,
        1.453243852642931,
        2.3230271994351828,
        4.073034857928573],
        [5.7021562,
        5.77258823,
        1.4635194748684495,
        2.3559947458380948,
        4.015946502571223],
        [5.57738021,
        5.71735772,
        1.4791565552254713,
        2.406609301127456,
        3.93135097129481],
        [5.45554105,
        5.65521517,
        1.5037459896331267,
        2.4872891191324014,
        3.8036395140767834],
        [5.33677352,
        5.58657034,
        1.541332406470095,
        2.6131836053194073,
        3.620142375955778],
        [5.22109403,
        5.5119216,
        1.5968624715221353,
        2.80486739951653,
        3.3724462931029024],
        [5.10839676,
        5.43186243,
        1.6770522533550307,
        3.093645131314398,
        3.0573291610572073],
        [4.99845757,
        5.34707778,
        1.7910868044184172,
        3.528666174445982,
        2.6801209431814224],
        [4.89097341,
        5.25828764,
        1.9428029188624096,
        4.151784472601702,
        2.277645683192819],
        [4.78561805,
        5.16616714,
        2.1282219373500926,
        4.982085045563361,
        1.8979067226630078],
        [4.68225922,
        5.07103816,
        1.9929582309556253,
        5.502716371285191,
        1.7182824310810452],
        [4.5807927,
        4.97315917,
        1.8460989424231267,
        6.002720515308713,
        1.5751182307813596],
        [4.48423127,
        4.87574754,
        1.70968380424494,
        6.214864240890868,
        1.5213388758567459],
        [4.38590263,
        4.78174583,
        1.5917549190748619,
        5.082511335818227,
        1.860392311711466],
        [4.28557394,
        4.69161601,
        1.5050552056395887,
        4.368916044996816,
        2.1643932596488393],
        [4.18298847,
        4.60589475,
        1.4384429308643987,
        3.7487566810629795,
        2.522665389999602],
        [4.07786706,
        4.52520222,
        1.3956927279274156,
        3.2152067214709867,
        2.941632982455158],
        [3.96993653,
        4.45019752,
        1.3773084451755955,
        2.7869534002923264,
        3.394149039322973],
        [3.85899528,
        4.38145216,
        1.3773084451755955,
        2.491622053443876,
        3.7970152708265403],
        [3.74489481,
        4.31948251,
        1.3773084451755955,
        2.2759492737254106,
        4.157432095681667],
        [3.62756967,
        4.26467533,
        1.3773084451755955,
        2.142678131234026,
        4.416515946929537],
        [3.50704818,
        4.21724334,
        1.3773084451755955,
        2.0866025156379138,
        4.535451201079369],
        [3.38344682,
        4.17720909,
        1.3825920274427144,
        2.1026423249360966,
        4.5007813212229175],
        [3.25695994,
        4.14439652,
        1.4120962909811594,
        2.1933398557856,
        4.314307802022612],
        [3.127848,
        4.11842776,
        1.4681972896288686,
        2.3710796423866056,
        3.990355379939516],
        [2.99642498,
        4.09872664,
        1.5559021353834668,
        2.662820301957209,
        3.552573137715619],
        [2.86304564,
        4.08453092,
        1.684760027828336,
        3.1221474219365737,
        3.029392442819322],
        [2.72812386,
        4.07482199,
        1.8924299654140313,
        3.9392807896943376,
        2.400582907315293],
        [2.59193728,
        4.06890472,
        2.084467411096171,
        4.779335576162007,
        1.978451281528833],
        [2.45475383,
        4.06606154,
        1.9415303290233739,
        6.024975362426303,
        1.5692986551276327],
        [2.31675601,
        4.06579649,
        1.7149370572367395,
        7.318871708343025,
        1.2918117709535741],
        [2.18155269,
        4.06331829,
        1.5597049628860837,
        8.32669533724774,
        1.1354351327721446],
        [2.04780686,
        4.05767025,
        1.4174749689907014,
        5.6350302310683995,
        1.6779244612352275],
        [1.9160569,
        4.04786584,
        1.3128321833475802,
        4.146347185827315,
        2.2806340371780034],
        [1.78687804,
        4.03297057,
        1.2219836734426368,
        3.2349954604576094,
        2.9236230844380753],
        [1.66081486,
        4.01224159,
        1.1452795713780852,
        2.6758527684353455,
        3.5352486496599864],
        [1.53852712,
        3.98486532,
        1.0858747123927575,
        2.2100805509312544,
        4.281567018620193],
        [1.4206473,
        3.95023961,
        1.0432818297263533,
        1.8958140393571592,
        4.992989579895129],
        [1.30787226,
        3.90781688,
        1.0158905375054639,
        1.6425103417778006,
        5.765428918366518],
        [1.20094766,
        3.85714104,
        1.0020496336285594,
        1.442780733101155,
        6.5668559383697],
        [1.10061457, 3.79792995, 1.0, 1.2969903498121025, 7.308837501888802],
        [1.0075779, 3.73010738, 1.0, 1.1972382760764921, 7.921555339491913],
        [0.92248872, 3.65380464, 1.0, 1.135196741904151, 8.357504253812005],
        [0.84593123, 3.56935114, 1.0, 1.1044747023315504, 8.591710263587458],
        [0.77841353, 3.47725834, 1.0, 1.0999610470929253, 8.627234393861585],
        [0.72036235,
        3.37819907,
        1.007747482395953,
        1.1170709282838318,
        8.49410886860381],
        [0.67212138,
        3.27298453,
        1.023039486704211,
        1.1512300019976702,
        8.240293645396678],
        [0.63395256,
        3.16254047,
        1.0434005620455236,
        1.1975107987293723,
        7.919741026249167],
        [0.60603986,
        3.04788364,
        1.0662161949228657,
        1.250454389421412,
        7.582407482200938],
        [0.58849476,
        2.93009865,
        1.0662161949228657,
        1.250454389421412,
        7.582407482200938],
        [0.58102712, 2.81034401, 1.1344657332557149, 999, 0.009463266929570712]]

        # Define the default reward
        reward = 1e-3

        # Calculate two point with the min distance from the racing lines coords
        first_min_distance_obj = self.calc_min_distance_from_closest_point(x, y, racing_lines_coords)
        second_min_distance_obj = self.calc_min_distance_from_closest_point(x, y, racing_lines_coords, first_min_distance_obj["index"])

        # Calculate the differance between the current speed of the car to the optimal speed in the closest racing line point
        speed_diff = abs(first_min_distance_obj["speed"] - speed)

        # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
        next_racing_line_y = racing_lines_coords[second_min_distance_obj["index"]][1]
        next_racing_line_x = racing_lines_coords[second_min_distance_obj["index"]][0]
        prev_racing_line_y = racing_lines_coords[first_min_distance_obj["index"]][1]
        prev_racing_line_x = racing_lines_coords[first_min_distance_obj["index"]][0]

        if second_min_distance_obj["index"] < first_min_distance_obj["index"]:
            # Last index of racing lines waypoints
            if first_min_distance_obj["index"] == 153:
                next_racing_line_y = racing_lines_coords[0][1]
                next_racing_line_x = racing_lines_coords[0][0]
            else:
                next_racing_line_y = racing_lines_coords[second_min_distance_obj["index"] + 2][1]
                next_racing_line_x = racing_lines_coords[second_min_distance_obj["index"] + 2][0]
           
        track_direction = math.atan2(next_racing_line_y - prev_racing_line_y, next_racing_line_x - prev_racing_line_x)
    
        # Convert to degree
        track_direction = math.degrees(track_direction)

        # Calculate the difference between the track direction and the heading direction of the car
        direction_diff = abs(track_direction - heading)
        if direction_diff > 180:
            direction_diff = 360 - direction_diff

        # Define markers that are at varying distances away from the optmal value
        MARKER_SPEED = 0.5
        MARKER_DISTANCE = 0.3
        DIRECTION_THRESHOLD = 15.0

        # Define multiplyer that are determine the importance of each reward
        MULTIPLYER_SPEED = 2.0
        MULTIPLYER_DISTANCE = 3.0
        MULTIPLYER_STEPS = 3.0

        # Speed: give higher reward if the car is closer to the optimal speed in this point
        if speed_diff <= MARKER_SPEED:
            reward += (1 - (speed_diff ** 2)) * MULTIPLYER_SPEED

        # Racing Lines distance: give higher reward if the car is closer to raceing line point
        if first_min_distance_obj["distance"] <= MARKER_DISTANCE:
            reward += (1 - (first_min_distance_obj["distance"] ** 2)) * MULTIPLYER_DISTANCE

        # Car Direction: penalize the reward if the difference is too large
        if direction_diff > DIRECTION_THRESHOLD:
            reward *= 0.5 

        # Progress: give higher reward if the car finish full lap
        if progress == 100:
            reward += 50.0

        # Steps: give higher reward if the car finish full lap in less the 240 steps - the reward will be by the time of the lap
        if progress == 100 and steps <= 240:
            reward += (100.0 - (steps / 15)) * MULTIPLYER_STEPS

        # Off Track: give zero reward the car is off track 
        if all_wheels_on_track == False:
            reward = 1e-3

        # Print logs to AWS CloudWatch
        if self.active_logs == True:
            print("======================================================")
            print("First closest racing lines index: %i" % first_min_distance_obj["index"])
            print("Second closest racing lines index: %i" % second_min_distance_obj["index"])
            print("First distance to racing line: %f" % first_min_distance_obj["distance"])
            print("Second distance to racing line: %f" % second_min_distance_obj["distance"])
            print("Optimal speed: %f" % first_min_distance_obj["speed"])
            print("Car speed: %f" % speed)
            print("Speed difference: %f" % speed_diff)
            print("Heading: %f" % heading)
            print("Track direction: %f" % track_direction)
            print("Direction diff: %f" % direction_diff)
            print("First closest racing lines circle radius: %f" % first_min_distance_obj["radius"])
            print("First closest racing lines angel: %f" % first_min_distance_obj["angel"])
            print("Current Reward: %f" % reward)
            
            if progress == 100:
                print("=== Finish reward: %f ===" % reward)
                print("=== Finish steps: %f ===" % steps)
                # Calculate the time lap acording the given - the car do 15 steps per second
                print("=== Finish lap time: %f ===" % (steps / 15.0))

        # Always return a float value
        return float(reward)

reward_object = Reward(active_logs = True)  # Add parameter active_logs = True to get logs info

import math
def reward_function(params):
    return reward_object.reward_function(params)
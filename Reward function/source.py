import math

class Reward:
    def __init__(self, active_logs = False):
        self.active_logs = active_logs

    def calc_min_distance_from_closest_point(self, curr_x, curr_y, racing_lines_coords, continueIndex = 999):
        # Calculate distance d²=(x1-x2)² + (y1-y2)²
        min_distance_from_current_coord = math.inf
        index_min_distance_from_current_coord = 0
        for index, [x, y, s, r, d] in enumerate(racing_lines_coords):
            if continueIndex == index:
                continue
            distance = (((curr_x - x) ** 2) + ((curr_y - y) ** 2)) ** 0.5
            if distance < min_distance_from_current_coord:
                min_distance_from_current_coord = distance
                index_min_distance_from_current_coord = index

        return {"index": index_min_distance_from_current_coord, "distance": min_distance_from_current_coord, "speed": racing_lines_coords[index_min_distance_from_current_coord][2], "radius": racing_lines_coords[index_min_distance_from_current_coord][3], "angel": racing_lines_coords[index_min_distance_from_current_coord][4]}


    # Input 3 coords [[x1,y1],[x2,y2],[x3,y3]]
    def calc_circle_radius(self,coords):
        # Flatten the list and assign to variables
        x1, y1, x2, y2, x3, y3 = [i for sub in coords for i in sub]

        a = x1*(y2-y3) - y1*(x2-x3) + x2*y3 - x3*y2
        b = (x1**2+y1**2)*(y3-y2) + (x2**2+y2**2)*(y1-y3) + (x3**2+y3**2)*(y2-y1)
        c = (x1**2+y1**2)*(x2-x3) + (x2**2+y2**2)*(x3-x1) + (x3**2+y3**2)*(x1-x2)
        d = (x1**2+y1**2)*(x3*y2-x2*y3) + (x2**2+y2**2) * \
            (x1*y3-x3*y1) + (x3**2+y3**2)*(x2*y1-x1*y2)

        # In case a is zero (so radius is infinity)
        try:
            r = abs((b**2+c**2-4*a*d) / abs(4*a**2)) ** 0.5
        except:
            r = 999

        return r

    def reward_function(self, params):

        # Import package (needed for circle_radius)
        import math

        # Read input parameters
        all_wheels_on_track = params["all_wheels_on_track"]  # flag to indicate if the agent is on the track
        x = params["x"]  # agent's x-coordinate in meters
        y = params["y"]  # agent's y-coordinate in meters
        closest_objects = params["closest_objects"]  # zero-based indices of the two closest objects to the agent's
        closest_waypoints = params["closest_waypoints"]  # indices of the two nearest waypoints.
        distance_from_center = params["distance_from_center"]  # distance in meters from the track center
        is_crashed = params["is_crashed"]  # Boolean flag to indicate whether the agent has crashed.
        is_left_of_center = params["is_left_of_center"]  # Flag to indicate if the agent is on the left side to the
        is_offtrack = params["is_offtrack"]  # Boolean flag to indicate whether the agent has gone off track
        is_reversed = params["is_reversed"]  # flag to indicate if the agent is driving clockwise (True) or
        heading = params["heading"]  # agent's yaw in degrees
        objects_distance = params["objects_distance"]  # list of the objects' distances in meters between 0 and
        objects_heading = params["objects_heading"]  # list of the objects' headings in degrees between -180 and 180
        objects_left_of_center = params["objects_left_of_center"]  # list of Boolean flags indicating whether elements' objects
        objects_location = params["objects_location"]  # list of object locations [(x,y) ...].
        objects_speed = params["objects_speed"]  # list of the objects' speeds in meters per second.
        progress = params["progress"]  # percentage of track completed
        speed = params["speed"]  # agent's speed in meters per second (m/s)
        steering_angle = abs(params["steering_angle"])  # agent's steering angle in degrees
        steps = params["steps"]  # number steps completed
        track_length = params["track_length"]  # track length in meters.
        track_width = params["track_width"]  # width of the track
        waypoints = params["waypoints"]  # list of (x,y) as milestones along the track center

        # Read all 155 track coordinates (x,y) after racing lines optimization (after 850 iterations). Including optimal speed, the radius in each point and the angel in deggres (s,r,d).
        racing_lines_coords = [[0.76561164, 2.79921096, 1.5751674139315897, 999, 0.009463266929570712],
        [0.77433204, 2.695514, 1.5751674139315897, 999, 0.009463266929570712],
        [0.7899877,
        2.59241502,
        1.5751674139315897,
        1.559706419532013,
        6.07263415691395],
        [0.81253181,
        2.49023377,
        1.58150707731918,
        1.5722865580155463,
        6.023865398786194],
        [0.84155804,
        2.38920145,
        1.5564884963032755,
        1.6753351539982795,
        5.652095397018683],
        [0.87670146,
        2.28950824,
        1.4365714603122575,
        1.7823135572052706,
        5.311837357103338],
        [0.91814643,
        2.19146346,
        1.3147063668518864,
        1.7386641964215064,
        5.445589646377326],
        [0.96598348,
        2.09538003,
        1.1900583910294051,
        1.724048793100864,
        5.49189523433939],
        [1.02110577,
        2.00190733,
        1.1900583910294051,
        1.5229345960247693,
        6.2198319615001045],
        [1.08483756,
        1.91208936,
        1.1900583910294051,
        1.2973103727677344,
        7.307024704271827],
        [1.15889387,
        1.82757667,
        1.1900583910294051,
        1.0865430902536324,
        8.734601852788241],
        [1.24544247,
        1.75117454,
        1.1900583910294051,
        0.8902786606479508,
        10.68067763714757],
        [1.33865459,
        1.67987295,
        1.624074216110063,
        1.6580635231664005,
        5.711166606891525],
        [1.43751087,
        1.61316408,
        1.7804675110297126,
        1.9927716158134419,
        4.749485141971399],
        [1.54114987,
        1.55049121,
        1.9608264907182957,
        2.4169504844978063,
        3.9145039848272174],
        [1.64906449,
        1.49148807,
        2.1119361642262247,
        2.8038255955729174,
        3.3737008266291695],
        [1.76077387,
        1.43573189,
        2.2956481500772807,
        3.312837034878491,
        2.854869257466207],
        [1.87582154,
        1.38275015,
        2.525181494853798,
        4.008432900892445,
        2.3591452475270565],
        [1.99379879,
        1.33205039,
        2.8103804385197213,
        4.965004538903742,
        1.904438263823096],
        [2.11442438, 1.28318436, 3.0, 6.16191474259244, 1.5344148943988303],
        [2.23741029, 1.23565791, 3.0, 8.117123244013738, 1.1647543733677268],
        [2.36252249, 1.18900726, 3.0, 11.189496016790867, 0.8449126082782554],
        [2.4895651, 1.14282388, 3.0, 16.32808371993551, 0.5790002481613885],
        [2.61828891, 1.09677841, 3.0, 26.39931541218671, 0.35811023977422035],
        [2.74812923, 1.05069182, 3.0, 56.0547893565077, 0.16865315845952703],
        [2.87900506, 1.00439082, 3.0, 133.0338884064998, 0.07106314155520664],
        [3.00882722, 0.95892681, 3.0, 43.433024726027035, 0.217664471195667],
        [3.13759114, 0.91473599, 3.0, 21.868870341333203, 0.4322991160434653],
        [3.26537475, 0.87215984, 3.0, 15.085459903229566, 0.6266956518511314],
        [3.39228501,
        0.83154603,
        2.852199519643643,
        11.258026903550686,
        0.8397690098445781],
        [3.51845045,
        0.79324155,
        2.6559366935165682,
        8.86045760287054,
        1.067027294635107],
        [3.64399906,
        0.75760342,
        2.509613428133116,
        7.216834949315957,
        1.3100794884653286],
        [3.76904579,
        0.72500547,
        2.3515851856662824,
        6.019985953206325,
        1.5705996272900533],
        [3.89368577,
        0.69584032,
        2.214844486910913,
        5.113864621458813,
        1.8489822070118052],
        [4.01799202,
        0.67049722,
        2.1075762157839644,
        4.434297839511412,
        2.132465367481137],
        [4.14201662,
        0.64930876,
        2.02580713654078,
        3.959160254123006,
        2.3885222597483455],
        [4.26577987,
        0.63273189,
        1.965649452019724,
        3.4762488100355955,
        2.7205638953641307],
        [4.38927914,
        0.62123967,
        1.9247048679993757,
        3.083726821482559,
        3.0671719559319484],
        [4.51249029,
        0.61526108,
        1.9011254657642314,
        2.7922609309921977,
        3.387689903637708],
        [4.63536749,
        0.61516804,
        1.893257263304318,
        2.5797974877869607,
        3.667055646628863],
        [4.75784381,
        0.62127088,
        1.893257263304318,
        2.428854846916935,
        3.8952884353783057],
        [4.87983294,
        0.63381301,
        1.893257263304318,
        2.3287223508087678,
        4.0630570433864035],
        [5.0012315,
        0.65296781,
        1.893257263304318,
        2.272013882226445,
        4.164645948076275],
        [5.12192174,
        0.67883876,
        1.893257263304318,
        2.2532463969730667,
        4.1993956345836025],
        [5.24177453,
        0.71146186,
        1.8996232557146397,
        2.268424751778796,
        4.171246960724359],
        [5.36065244,
        0.75080957,
        1.918888352778198,
        2.314668682161438,
        4.087767985427956],
        [5.47841292,
        0.79679602,
        1.9497892047905547,
        2.389817544501195,
        3.959018013440955],
        [5.59491126,
        0.84928294,
        1.9911195319311075,
        2.4922068606769874,
        3.796122978427403],
        [5.71000341,
        0.90808645,
        2.041656434322007,
        2.6203224967099428,
        3.610266451134259],
        [5.82354846,
        0.97298407,
        2.1001964975741125,
        2.772740856357152,
        3.4115673408324754],
        [5.93541068,
        1.0437221,
        2.1654880276414215,
        2.947820237006795,
        3.208725890888835],
        [6.0454611,
        1.12002284,
        2.2362719808559337,
        3.1436824225517785,
        3.008621196163456],
        [6.15357859,
        1.20159164,
        2.311247333682992,
        3.3580121898879374,
        2.816431681316605],
        [6.25965028,
        1.2881234,
        2.3890781707227866,
        3.58798106329992,
        2.6357828443025593],
        [6.36357148,
        1.37930854,
        2.4683725884011665,
        3.8301065144184174,
        2.4690514980181772],
        [6.46524502,
        1.47483823,
        2.547676381875497,
        4.080167047070883,
        2.3176458535225453],
        [6.56457998,
        1.57440865,
        2.625477679575543,
        4.333173545016517,
        2.1822550188632728],
        [6.66149006,
        1.67772453,
        2.700179620165311,
        4.583262506215541,
        2.063125750146351],
        [6.75589138,
        1.78450162,
        2.7701178595206652,
        4.823762495514524,
        1.9602225720580895],
        [6.84770001,
        1.89446831,
        2.8335788405124807,
        5.047310513821837,
        1.8733716210142735],
        [6.93682919,
        2.00736635,
        2.888826794301733,
        5.246050044297614,
        1.8023775829606472],
        [7.02318639,
        2.12295071,
        2.9341772223587985,
        5.412053795664196,
        1.7470759016868278],
        [7.1066703,
        2.24098868,
        2.9670347914902986,
        5.537790247005056,
        1.707396369234868],
        [7.18716776,
        2.36125827,
        2.9308254347525717,
        5.616614569987618,
        1.6834275926998126],
        [7.26455098,
        2.483546,
        2.8813176806005507,
        5.643676450805635,
        1.6753531155849455],
        [7.33867494,
        2.60764424,
        2.820049341111445,
        5.6161548815383275,
        1.6835654227667844],
        [7.40937528,
        2.73334811,
        2.749114037261194,
        5.533943232428932,
        1.7085836466338702],
        [7.47646688,
        2.86045226,
        2.671181469752122,
        5.399696195879045,
        1.75107545660353],
        [7.53974339,
        2.98874764,
        2.5895429781427266,
        5.218812698176242,
        1.8117874452699243],
        [7.59897815,
        3.11801846,
        2.5080710680408647,
        4.999226756907852,
        1.8913966734378975],
        [7.65392713,
        3.24803997,
        2.4313046295820198,
        4.7508895375246105,
        1.990302047912611],
        [7.70433455,
        3.37857719,
        2.3643025286691226,
        4.485348669389005,
        2.1081832941334206],
        [7.7499424,
        3.50938546,
        2.3126081892953554,
        4.215369691791265,
        2.243271660187706],
        [7.79050461,
        3.64021332,
        2.283148304630065,
        3.954295302212232,
        2.3914625546654835],
        [7.82580692,
        3.77080829,
        2.2809556494891745,
        3.7159355776824343,
        2.544961502273714],
        [7.85569184,
        3.90092577,
        2.2734100351207016,
        3.5139494969230003,
        2.6913537312557003],
        [7.88008701,
        4.03034055,
        2.177758830010706,
        3.3619677293941126,
        2.8131153280746766],
        [7.89903768,
        4.15886077,
        2.082783430826935,
        3.2768583401793236,
        2.8862410640918434],
        [7.91272164,
        4.28633872,
        1.9541650155942158,
        3.2705674039743386,
        2.8917974629187877],
        [7.92128781,
        4.41264156,
        1.8360758423395733,
        3.2489645103723546,
        2.911042001901136],
        [7.92447728,
        4.53753961,
        1.6548628700654082,
        2.981322712459481,
        3.1726308740925044],
        [7.92201458,
        4.66077418,
        1.4691030685213646,
        2.726952983580982,
        3.4689199878865193],
        [7.9133979,
        4.78198389,
        1.3055274373563917,
        2.4005562683516435,
        3.941279567450923],
        [7.89812233,
        4.90076287,
        1.1516523703141968,
        2.1191937043080977,
        4.465557574420509],
        [7.87505235,
        5.01638528,
        1.0086571722246207,
        1.7215254433195502,
        5.499969854257805],
        [7.8426419,
        5.12776564,
        1.0086571722246207,
        1.356731641676369,
        6.9853639976719935],
        [7.7991328,
        5.23341069,
        1.0086571722246207,
        1.0714241447613295,
        8.858841042645222],
        [7.74232044,
        5.33103609,
        1.0086571722246207,
        0.8337430632517382,
        11.414341130892094],
        [7.66965414,
        5.41671541,
        1.0086571722246207,
        0.6395530641443631,
        14.95098731229026],
        [7.58548525,
        5.49133287,
        1.1223663296030726,
        0.791878736108251,
        12.026568102525294],
        [7.49249755,
        5.55565671,
        1.222289543332563,
        0.93915573483979,
        10.118797537294954],
        [7.39272914,
        5.61057946,
        1.3310378040887896,
        1.1137050859583062,
        8.51997039270909],
        [7.28774798,
        5.65703448,
        1.4493178511075955,
        1.320434019250416,
        7.178383077730389],
        [7.17863584,
        5.69567517,
        1.5509825798171581,
        1.5121792066732682,
        6.264247057686158],
        [7.06626291,
        5.72714099,
        1.6571850217672066,
        1.726360222218609,
        5.484519562122979],
        [6.95119881,
        5.75168914,
        1.7225829018644447,
        1.8653042782579576,
        5.074869677256294],
        [6.83392084,
        5.76948952,
        1.7764177963550056,
        1.9837167147530321,
        4.771214844635086],
        [6.71479951,
        5.7804432,
        1.7932963341242834,
        2.0215921541888693,
        4.681622595298176],
        [6.59428145,
        5.78486017,
        1.8629292014432761,
        2.1816351522294672,
        4.337498720962689],
        [6.4727123,
        5.78280876,
        1.897526188117366,
        2.26341911259298,
        4.180488221915825],
        [6.35041564,
        5.77438996,
        1.9299536910778898,
        2.354509899664248,
        4.018483275280317],
        [6.22767817,
        5.75942619,
        1.9299536910778898,
        2.3414408911297016,
        4.040950039174849],
        [6.10480484,
        5.73778469,
        1.9305088708977503,
        2.342788185325315,
        4.0386223060062125],
        [5.98210522,
        5.70948046,
        1.9513173571220792,
        2.39356506385134,
        3.95280965975471],
        [5.8598719,
        5.67464525,
        1.98822250097901,
        2.4849599346784483,
        3.8072099676713553],
        [5.73836377,
        5.63350386,
        2.039399051825647,
        2.6145313165637063,
        3.6182738175911107],
        [5.61779372,
        5.58636238,
        2.105689015742124,
        2.7872625867983145,
        3.393772090922341],
        [5.49831957,
        5.53359894,
        2.189346571028428,
        3.013134046067503,
        3.139101909675764],
        [5.38003826,
        5.47565588,
        2.294228887206769,
        3.308742040458865,
        2.858405458246746],
        [5.26298308,
        5.41303344,
        2.4265975463915215,
        3.701561166590844,
        2.5548509892294415],
        [5.1471238,
        5.34628486,
        2.5966998755212733,
        4.238702502695964,
        2.2309168477700645],
        [5.0323693,
        5.27601209,
        2.822001364375503,
        5.00615002893545,
        1.888780011459154],
        [4.91857262, 5.20286181, 3.0, 6.178077007320764, 1.5303998057393333],
        [4.80553743, 5.12752246, 3.0, 8.172470702295534, 1.156865084033646],
        [4.69302581, 5.05072246, 3.0, 12.306261317642806, 0.7682338810482714],
        [4.5807927, 4.97315917, 3.0, 23.61887227968529, 0.40026807400463243],
        [4.47306546, 4.89888131, 3.0, 123.97214020926079, 0.0762575074916079],
        [4.36498285,
        4.8253982,
        2.756996827886437,
        19.966470422838224,
        0.47348935614676085],
        [4.25624758,
        4.75337765,
        2.587638242627301,
        10.801364542377726,
        0.8752756466797191],
        [4.14656401,
        4.68348892,
        2.4789865662036026,
        7.3612680231450485,
        1.2843704904018662],
        [4.03567359,
        4.6163249,
        2.4171648186825356,
        5.713197269363618,
        1.6549609399801446],
        [3.92335987,
        4.55239151,
        2.3950614331108935,
        4.778173934838792,
        1.9789324622076214],
        [3.80945274,
        4.49209756,
        2.3950614331108935,
        4.209170751276431,
        2.2465770697378797],
        [3.69383179,
        4.43574605,
        2.3950614331108935,
        3.863116173290005,
        2.447940978430173],
        [3.57642813,
        4.38352817,
        2.3950614331108935,
        3.672839505815969,
        2.5748433709068617],
        [3.45722493,
        4.33552102,
        2.3950614331108935,
        3.605975212403363,
        2.622620827919947],
        [3.33625638,
        4.29168982,
        2.4093498710732493,
        3.649128546505644,
        2.5915853246279092],
        [3.21360565,
        4.25189567,
        2.459060672215343,
        3.8012629298993548,
        2.487798140071931],
        [3.08940208,
        4.21590815,
        2.5451553307338846,
        4.072095990275533,
        2.322242034680645],
        [2.96381787,
        4.18342069,
        2.6709058660803593,
        4.484423150247751,
        2.108618588753561],
        [2.83706273,
        4.15406719,
        2.842637719560648,
        5.079634345719365,
        1.861446366644463],
        [2.70937306, 4.12743907, 3.0, 5.928694955454094, 1.5947901729044798],
        [2.58099653, 4.10308575, 3.0, 7.20621445767371, 1.312010615964445],
        [2.45215177, 4.08057666, 3.0, 9.003170959793776, 1.0501114503961926],
        [2.32301465, 4.05949102, 3.0, 11.784567478870503, 0.802245186191367],
        [2.19837845,
        4.03803371,
        2.69826313265682,
        14.898751185243388,
        0.634549618592133],
        [2.07480715,
        4.01517768,
        2.420484622870411,
        10.161130072228008,
        0.9304298903080382],
        [1.95267174,
        3.99042323,
        2.1634306392491145,
        7.32859242458742,
        1.290098009438217],
        [1.83230451,
        3.96331844,
        1.9375520227600451,
        5.762679400187845,
        1.6407464613974037],
        [1.71408912,
        3.93334796,
        1.7643051662676756,
        4.576758755072445,
        2.0660588020838855],
        [1.59845849,
        3.8999487,
        1.5507126716306572,
        3.6829352022801567,
        2.5677804503928456],
        [1.48596082,
        3.86244333,
        1.3722962068426943,
        2.9422215636077036,
        3.2148380976703637],
        [1.37725893,
        3.82007563,
        1.182788262341815,
        2.3599139423099853,
        4.009266155426385],
        [1.27302755, 3.77217454, 1.0, 1.9567567187261452, 4.8371077105383895],
        [1.1744859, 3.71757033, 1.0, 1.51165294153175, 6.2664366213551475],
        [1.08316271, 3.65504353, 1.0, 1.1838185688726777, 8.011940221918433],
        [1.00170501, 3.58283771, 1.0, 0.8794343689030555, 10.813957328055626],
        [0.93490907, 3.49914189, 1.0, 0.6286217770833288, 15.217206765231303],
        [0.88109283,
        3.40790169,
        1.0979552783105604,
        0.7578071939867856,
        12.575944352212286],
        [0.83879464,
        3.31160766,
        1.188104559862785,
        0.8873577513981188,
        10.716250213563216],
        [0.80687151,
        3.21193203,
        1.2674749936786947,
        1.0098763962739377,
        9.403506019033884],
        [0.78431647,
        3.11008729,
        1.3443691971754357,
        1.1361260775284407,
        8.350619088714803],
        [0.77046979,
        3.00693713,
        1.4007001956429062,
        1.2333314343223778,
        7.68830979453221],
        [0.76440624,
        2.9031572,
        1.4007001956429062,
        1.2333314343223778,
        7.68830979453221],
        [0.76561164, 2.79921096, 1.5751674139315897, 999, 0.009463266929570712]]

        # Define the default reward
        reward = 1e-3

        # Define the axle distance of the car (in meters)
        car_axle = 0.165
        angel_diff = 0

        # Calculate two point with the min distance from the racing lines coords
        first_min_distance_obj = self.calc_min_distance_from_closest_point(x, y, racing_lines_coords)
        second_min_distance_obj = self.calc_min_distance_from_closest_point(x, y, racing_lines_coords, first_min_distance_obj["index"])

        # Calculate the differance between the current speed of the car to the optimal speed in the racing line point
        speed_diff = abs(first_min_distance_obj["speed"] - speed)

        # Calculate the differance between the current radius of the car to the optimal radius from racing line point
        circle_radius = self.calc_circle_radius([[x,y],[racing_lines_coords[first_min_distance_obj["index"]][0], racing_lines_coords[first_min_distance_obj["index"]][1]], [racing_lines_coords[second_min_distance_obj["index"]][0],racing_lines_coords[second_min_distance_obj["index"]][1]]])
        if circle_radius != 999:
            angel_diff = abs(first_min_distance_obj["angel"] - math.degrees(math.asin(car_axle * circle_radius)))

        # Calculate 3 markers that are at varying distances away from the closest raceing line point
        marker_speed = 0.5
        marker_distance = 0.5
        marker_angel = 1

        # Give higher reward if the car is closer to the optimal speed in this point
        if speed_diff <= marker_speed:
            reward += (1 - (speed_diff ** 2)) * 2

        # Give higher reward if the car is closer to raceing line point and vice versa
        if first_min_distance_obj["distance"] <= marker_distance:
            reward += (1 - (first_min_distance_obj["distance"] ** 2)) * 1.5 

        # Give higher reward if the car direction is closer to raceing line radius angel
        if angel_diff != 0 and angel_diff < marker_angel:
            reward += (1 - (angel_diff ** 2)) * 1.5

        # Give higher reward if the car finish full lap
        if progress == 100:
            reward += 50.0

        # Give higher reward if the car finish full lap in less the 250 steps - the reward will be by the time of the lap
        if progress == 100 and steps <= 240:
            reward += 100.0 - (steps / 15)

        # Give zero reward the car is off track 
        if all_wheels_on_track == False:
            reward = 1e-3

        # Print logs to AWS CloudWatch
        if self.active_logs == True:
            print("======================================================")
            print("First closest racing lines index: %i" % first_min_distance_obj["index"])
            print("Second closest racing lines index: %i" % second_min_distance_obj["index"])
            print("First distance to racing line: %f" % first_min_distance_obj["distance"])
            print("Second distance to racing line: %f" % second_min_distance_obj["distance"])

            print("Optimal speed: %f" % first_min_distance_obj["speed"])
            print("Car speed: %f" % speed)
            print("Speed difference: %f" % speed_diff)

            print("Heading: %f" % heading)
            print("Circle radius: %f" % circle_radius)
            print("First closest racing lines circle radius: %f" % first_min_distance_obj["radius"])
            print("First closest racing lines angel: %f" % first_min_distance_obj["angel"])
            print("Angel diff: %f" % angel_diff)
            
            print("Current Reward: %f" % reward)
            if progress == 100:
                print("=== Finish reward: %f ===" % reward)
                print("=== Finish steps: %f ===" % steps)
                # Calculate the time lap acording the given - the car do 15 steps per second
                print("=== Finish lap time: %f ===" % (steps / 15.0))

        # Always return a float value
        return float(reward)

reward_object = Reward(active_logs = True)  # Add parameter active_logs = True to get logs info

def reward_function(params):
    return reward_object.reward_function(params)